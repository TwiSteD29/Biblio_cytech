#include"fonctions_livre.h"


int liste_livre_biblio(User tab,int place){
    //afficher tous les livres de la bibliotheque
    system("clear") ;
    printf("************************************************\n");
    printf("        APPLICATION BIBLIOTHEQUE CY TECH        \n");
    printf("************************************************\n");
    FILE *f;
    f = fopen("liste_livre.txt", "r");
    if(f==NULL){
        printf("Erreur lors de l'ouverture d'un fichier");
        exit(1);
    }
    int ch ; 
    printf("\n    Liste des livres :  \n");
    printf("TITRE  /  AUTEUR  /  CATEGORIE / EMPRUNT /OWNER\n");
    while((ch=fgetc(f))!=EOF){
	  printf("%c", ch);

    }
 
    fclose(f);

    printf("\nretour menu bibliotheque ? , tapez 0  \n");
    char retour[1];
    scanf( "%s",&retour);
    if (strcmp (&retour,"0") == 0) {
    // retour menu biblio
    biblio(tab,place);
    }
    else{
		liste_livre_biblio(tab,place);
	}

}


int recherche_livre(){ // rechercher un livre 
	int place;
    User tab[20];
    char retour[1];
    do{
    FILE *f;
    f = fopen("liste_livre.txt", "r");
    if(f==NULL){
        printf("Erreur lors de l'ouverture d'un fichier");
        exit(1);
    }
    char motcle[20];
    printf("\n Saisissez un mot cle pour rechercher un livre  \n");
    scanf( "%s",motcle);
    char ligneLivre[10000];
    printf("\n Liste des livres  : %s", ligneLivre);
    while (fgets(ligneLivre,9999,f)!=NULL){
    char * resultat;
       resultat=strstr(ligneLivre,motcle);
         if (resultat != 0 ) {
      printf("\n %s", ligneLivre);
         }
    }
    fclose(f);
    printf("\nretour menu bibliotheque tapez 1, nouvelle recherche tapez 2  \n");
    scanf( "%s",&retour);
    if (strcmp(retour,"1") ==0) {
    biblio(tab,place);
    } 
  
    }while (strcmp(retour,"1") != 0 || strcmp(retour,"2") != 0 );
    
}

void enregistrelivre(Livre tab[],int nmb_livre){
FILE *f;
int i=0;
    	f = fopen("liste_livre.txt", "w");
    	if(f==NULL){
        	printf("Erreur lors de l'ouverture d'un fichier");
        	exit(1);
    	}
while(i<nmb_livre){
	fprintf(f,"%s %s %s %s %s %s %s %s\n",tab[i].titre,tab[i].auteur,tab[i].cat, 		tab[i].borrow,tab[i].owner,tab[i].h,tab[i].min,tab[i].sec) ;
i++;
}
	fclose(f);
}

// emprunter un livre
int emp_livre(User tab[],int place,Livre tab_livre[],int nmb_livre){
    	FILE *f;
	int h, min, sec;
    	f = fopen("liste_livre.txt", "a+");
    	if(f==NULL){
        	printf("Erreur lors de l'ouverture d'un fichier");
        	exit(1);
    	}
	for(int i=0;i<=nmb_livre;i++){
		if(tab_livre[i].borrow[0]=='1'){
		printf("%d : %s\n",i,tab_livre[i].titre);
		}	
	}
   	printf("Quel numero de livre voulez vous emprunter ? \n");
   	char numero[3];
   	scanf("%s",numero);
   	strcpy(tab_livre[atoi(&numero)].owner,tab[place].login);
	tab_livre[atoi(&numero)].borrow[0]='2';
  	printf("%s a emprunté %s retour au menu ...\n",tab_livre[atoi(&numero)].owner,tab_livre[atoi(&numero)].titre);
	printf("%d\n",nmb_livre);
	timee(&h,&min,&sec);
	printf("emprunté a %d:%d:%d\n",h,min,sec);
	sprintf(tab_livre[atoi(&numero)].h,"%d",h);
	sprintf(tab_livre[atoi(&numero)].min,"%d",min);
	sprintf(tab_livre[atoi(&numero)].sec,"%d",sec);
	enregistrelivre(tab_livre,nmb_livre);
    	fclose(f) ;
	sleep(2);		
}

void timee(int* h,int* min,int* sec){
	time_t now;
	//renvoie l'heure actuelle
	time(&now);
	//convertir au format heure locale
	struct tm* local = localtime(&now);
	*h=local->tm_hour;
	*min=local->tm_min;
	*sec=local->tm_sec;
	
	//printf("L'heure : %02d:%02d:%02d\n",h,min,s);
	//afficher la date courante
	//printf("La date : %02d/%02d/%d\n",jour,mois,an);
} 



int ajout_livre(User tab[],int place){ // ajouter un livre (cas professeur)
system("clear") ;
    printf("************************************************\n");
    printf("        APPLICATION BIBLIOTHEQUE CY TECH        \n");
    printf("************************************************\n");  
    
	Livre new;
	FILE *f;
 	f = fopen("liste_livre.txt", "a");

    if(f==NULL){
        printf("Erreur lors de l'ouverture d'un fichier");
        exit(1);
    }

    printf("Entrez le titre du livre : \n");
    scanf( "%s", &new.titre);

    printf("Entrez l'auteur du livre : \n");
    scanf( "%s", &new.auteur);
  
    printf("Entrez la categorie du livre : \n");
    scanf( "%s", &new.cat);

	new.borrow[0]='1';
	
    fprintf(f, "%s %s %s %s %s %s %s %s\n", new.titre, new.auteur,new.cat,new.borrow,new.owner,new.h,new.min,new.sec);

    fclose(f);
    
    printf("\najouter un autre livre ? , tapez a  \n");
    printf("retour menu bibliotheque ? , tapez o  \n");
    char retour[1];
    scanf( "%s",retour);
    if (strcmp (retour,"a") == 0) {
    // retour menu biblio
    ajout_livre(tab,place);
    }
    if (strcmp (retour,"o") == 0) {
    // retour menu biblio
    biblio(tab,place);
    }
    return 0;
}

void rest_livre(User tab[],int place, int nmb_livre){
	Livre* tab_livre;	
	int c;
	liste_livre_emp(tab,place,nmb_livre);
	tab_livre=recuplivre(&nmb_livre);
	printf("entrez le numéro du livre que vous voulez rendre\n");
	scanf("%d",&c);
	tab_livre[c].borrow[0]='1';
	printf("%s rendu !\n",tab_livre[c].titre);
	enregistrelivre(tab_livre,nmb_livre);
}


void liste_livre_emp(User tab[],int place, int nmb_livre){
Livre* tab_livre;
tab_livre=recuplivre(&nmb_livre);
printf("VOS LIVRES :\n");
for(int i=0;i<nmb_livre;i++){
	if(strcmp(tab_livre[i].owner,tab[place].login)==0 && atoi(tab_livre[i].borrow)==2){
		printf("%d : %s\n",i,tab_livre[i].titre);
	}
}

}



Livre* recuplivre(int *nmb_livre){
	
	Livre* tab = NULL;
	FILE* save = NULL;
	save=fopen("liste_livre.txt","r");
	if(save == NULL){
		printf("Ouverture du fichier impossible\n");
		printf("code d'erreur = %d\n", errno);
		//printf("Message d'erreur = %s \n", strerror(errno) );
		exit(1);
	}
	
	char lignelivre[1000];
	while(fgets(lignelivre,999,save)!=NULL){
		*nmb_livre=*nmb_livre+1;
	}
	tab = malloc(*nmb_livre * sizeof(Livre));

	rewind(save);

	int i=0;

	while(fgets(lignelivre,999,save)!=NULL){

		sscanf(lignelivre,"%s %s %s %s %s %s %s %s",tab[i].titre,tab[i].auteur,tab[i].cat, tab[i].borrow,tab[i].owner,tab[i].h,tab[i].min,tab[i].sec) ;
	i++;
	
	}
	
	fclose(save);
	return tab;
}
